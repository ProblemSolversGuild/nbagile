# AUTOGENERATED! DO NOT EDIT! File to edit: 99_test.ipynb (unless otherwise specified).


from __future__ import annotations


__all__ = ['get_annotations', 'reformat_function', 'reformat_function', 'addition']

# Cell
#nbdev_comment from __future__ import annotations

# Cell
def get_annotations(
    source:str # Source code of function or class
):
    "Extracts the type annotations from source code"
    annos = []
    orig = list(locals().keys())
    exec(source);
    new = list(locals().keys())
    orig += ['new', 'orig']
    new += ['new']
    for key in set(new) - set(orig):
        params = inspect.signature(locals()[key]).parameters.keys()
        param_args = []
        for param in params:
            param_args.append(inspect.signature(locals()[key]).parameters[param].default)
        return_anno = inspect.signature(locals()[key]).return_annotation
        annos.append((
            locals()[key].__annotations__,
            locals()[key].__doc__,
            param_args,
            return_anno
        ))
        del locals()[key]
    if len(annos) == 1: return annos[0]
    else: return annos

# Cell
def reformat_function(
    source:str, # Source code
):
    "Takes messy source code and refactors it into a readable PEP-8 standard style"
    docs = dments.docments(source)
    annos = get_annotations(source)
    param_locs = dments._param_locs(source)
    new_source = ''
    new_source += source.split('\n')[0]
    for i, (name, default) in enumerate(zip(annos[0].keys(), annos[2])):
        new_source += f'{name}'
        if default != inspect._empty:
            new_source += f'={default}'
        if i < len(annos[2])-1:
            new_source += ','
        else:
            new_source += '):'
    new_source.rstrip(',')
    _ds = '    '
    new_source += f'\n{_ds}"""\n{_ds}'
    new_source += f'{annos[1]}\n\n'
    new_source += f'{_ds}Parameters\n{_ds}----------\n'
    for param in param_locs.values():
        if param != 'return':
            new_source += f'{_ds}{param} : {annos[0][param]}\n\t'
            new_source += docs[param] + '\n'
    if annos[-1] != inspect._empty:
        new_source += f'\n{_ds}Returns:\n{_ds}--------\n'
        new_source += f'{_ds}{annos[-1]}\n\t{docs["return"]}\n'
    new_source += f'{_ds}"""'
    new_source += source.split('"')[-1]
    new_source = new_source.rstrip('\n')
    return new_source

# Cell
def reformat_function(
    source:str, # Source code
):
    "Takes messy source code and refactors it into a readable PEP-8 standard style"
    docs = dments.docments(source)
    annos = get_annotations(source)
    param_locs = dments._param_locs(source)
    new_source = ''
    new_source += source.split('\n')[0]
    for i, (name, default) in enumerate(zip(annos[0].keys(), annos[2])):
        new_source += f'{name}'
        if default != inspect._empty:
            new_source += f'={default}'
        if i < len(annos[2])-1:
            new_source += ','
        else:
            new_source += '):'
    new_source.rstrip(',')
    _ds = '    '
    new_source += f'\n{_ds}"""\n{_ds}'
    new_source += f'{annos[1]}\n\n'
    new_source += f'{_ds}Parameters\n{_ds}----------\n'
    for param in param_locs.values():
        if param != 'return':
            new_source += f'{_ds}{param} : {annos[0][param]}\n\t'
            new_source += docs[param] + '\n'
    if annos[-1] != inspect._empty:
        new_source += f'\n{_ds}Returns:\n{_ds}--------\n'
        new_source += f'{_ds}{annos[-1]}\n\t{docs["return"]}\n'
    new_source += f'{_ds}"""'
    new_source += source.split('"')[-1]
    new_source = new_source.rstrip('\n')
    return new_source

# Cell
def addition(
    a:int, # The first number to add
    b:int, # The second number to add
) -> int: # The sum of a and b
    "Adds two numbers together"
    return a+b